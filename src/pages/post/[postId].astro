---
import Layout from "@layouts/Layout.astro";
import Header from "@mycomponents/Header.svelte";
import Comment from "@mycomponents/Comment.svelte";
import { toHTML } from "@portabletext/to-html";

const { postId } = Astro.params;

import { sanityClient } from "sanity:client";

const post = await sanityClient.fetch(
  `
    *[_type == "post" && slug.current == $postId][0] {
        _id,
        title,
        body,
        publishedAt,
        "author": author->name,
        categories[]-> {
            title,
            slug
        },
        "images": body[_type == "image"]{
            "_ref": asset._ref,
            "url": asset->url
        }
    }
`,
  { postId }
);

const html = toHTML(post.body, {
  components: {
    types: {
      image: ({ value }) => {

        const url =
          post.images.find(
            (image: { _ref: string , url: string}) => image._ref === value.asset._ref
          ).url || "";

        return `<img src="${url}" alt="${value.asset.alt || ""}" />`;
      },
    },
  },
});

export async function getStaticPaths() {
  const posts = await sanityClient.fetch(`
        *[_type == "post" && defined(slug)] {
            "slug": slug.current
        }
    `);

  return posts.map((post: { slug: string }) => ({
    params: { postId: post.slug },
  }));
}
---

<Layout>
  <Header client:load />
  <main class="max-w-6xl mx-auto px-4 py-8 dark:bg-dark-background">
    <article class="max-w-none">
      <header class="mb-8">
        <h1 class="text-4xl text-primary font-bold mb-4 dark:text-white">{post.title}</h1>
        <div class="flex flex-wrap items-center gap-4 text-gray-600 dark:text-gray-200 mb-4">
          <time datetime={post.publishedAt}>
            {new Date(post.publishedAt).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
            </time>
            <span>â€¢</span>
          {post.author && (
            <span>by {post.author}</span>
          )}
        </div>
        {post.categories && post.categories.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {post.categories.map((category: {title: string, slug: string}) => (
              <span class="bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100 px-3 py-1 rounded-full text-sm">
                {category.title}
              </span>
            ))}
          </div>
        )}
      </header>
      <div class="prose-content dark:text-gray-300" set:html={html} />
    </article>
  </main>
  <Comment postId={post._id} client:load client:only />
</Layout>
